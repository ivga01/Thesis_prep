/*
 *  Author: Ivan Garbacz, Kasper MÃ¸ller Nielsen
 *  Model Name: ATMv2.sphty
 *  Status: DEVELOPMENTAL
 *
 *  Comments: This security protocol is used to show the understanding of how Tamarin prover is used
 *  in our master's thesis preperation project.
 */
//test
theory ATM_v3
begin

builtins: symmetric-encryption, hashing

#ifdef trainedHuman
axiom trainedHuman:
	"not(Ex trained #k. H(trained) @k)"
#endif

//Creates a creaditcard with a fresh pin******************
rule create_creaditcard:
	[Fr(~pin)]
	--[CreateCard($card, ~pin)]->
	[!Creaditcard($card, ~pin)]


//Modeling the human**************************************
//Create untrained human
rule create_human:
	[Fr(~x)]
	-->
	[!HK($h,$item,~x)]

rule learnPin_human:
	[!HK($h,$item,~x), !Creaditcard($card, ~pin)]
	--[GiveKnowledge($card, ~pin)]->
	[!HK($h,$card,~pin)]

rule dontCoverPin_human:
	[!HK($h,$item,~x)]
	--[Dontcoverpin(~x), H($trained)]->
	[Out(~x)]




//Connection between ATM and Host************************
//Sending request to see if card is valid


rule cryptingKey:
	[Fr(~k)]
	-->
	[!Key(~k)]


rule Atm:
	[Fr(~k), !Creaditcard($card, ~pin)]
	-->
	[ Atm($card), Out(<$card,senc(~pin,~k)>)]


rule Bank:
	[Atm(card), In(<card,h(pin)>)]
	--[Customer(card)]->
	[]


rule Host:
	[!Creaditcard($card,~pin), !Key(~k), In(request)]
	--[ConfirmIdentity($card, sdec(senc(request,~k),~k))]->
	[Out(<$card,h(sdec(senc(request,~k),~k))>)]

//Lemma's*********************************************
//Shows if the attacker knows the pin, without it has been revealed
lemma knowledgeOfPin:
" // It cannot be that
not(Ex pin card #i #j.
    CreateCard(card,pin)@ #i &
// The attacker knows the pin
K(pin) @ #j
)
"



lemma AuthOfClient:
"
( All card #i. Customer(card) @ #i
	==>
(	(Ex pin #j. ConfirmIdentity(card,pin) @ #j) ) |
	(Ex pin #k. CreateCard(card,pin) @ #k)
)
"







end